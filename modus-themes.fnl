(fn hi! [group hl]
  `(vim.api.nvim_set_hl 0 ,group ,hl))

(fn hi-kinds! [prefix]
  `(let [kinds# {
                 :Array "@punctuation.bracket"
                 :Boolean "@boolean"
                 :Class "@type"
                 :Color "Special"
                 :Constant "@constant"
                 :Constructor "@constructor"
                 :Enum "@lsp.type.enum"
                 :EnumMember "@lsp.type.enumMember"
                 :Event :Special
                 :Field "@variable.member"
                 :File :Normal
                 :Folder :Directory
                 :Function "@function"
                 :Interface "@lsp.type.interface"
                 :Key "@variable.member"
                 :Keyword "@lsp.type.keyword"
                 :Method "@function.method"
                 :Module "@module"
                 :Namespace "@module"
                 :Null "@constant.builtin"
                 :Number "@number"
                 :Object "@constant"
                 :Operator "@operator"
                 :Package "@module"
                 :Property "@property"
                 :Reference "@markup.link"
                 :Snippet "Conceal"
                 :String "@string"
                 :Struct "@lsp.type.struct"
                 :Unit "@lsp.type.struct"
                 :Text "@markup"
                 :TypeParameter "@lsp.type.typeParameter"
                 :Variable "@variable"
                 :Value "@string"
                 }]
     (each [kind# hl# (pairs kinds#)]
       (vim.api.nvim_set_hl 0 (.. ,prefix kind#) {:link hl#}))))

(fn modus-themes-theme [name palette]
  "Binds NAME's color PALETTE around highlighting groups."
  (let [p (collect [k v (pairs palette)]
            (tostring k)
            (or (?. palette v) v))]
    `(do
       (when vim.g.colors_name
         (vim.cmd "hi clear"))
       (vim.api.nvim_set_var :colors_name ,name)
       (vim.api.nvim_set_option_value :termguicolors true {})

;;;;;;;; Built-in
       ,(hi! :ColorColumn {:fg p.bg-active :bg p.bg-active})
       ,(hi! :Conceal {:fg p.fg-alt})
       ,(hi! :CurSearch {:link :IncSearch})
       ,(hi! :Cursor {:bg p.cursor})
       ,(hi! :CursorColumn {:bg p.bg-active})
       ,(hi! :CursorIM {:link :Cursor})
       ,(hi! :CursorLine {})
       ,(hi! :DiffAdd {:fg p.fg-added :bg p.bg-added-faint})
       ,(hi! :DiffChange {:fg p.fg-changed :bg p.bg-changed-faint})
       ,(hi! :DiffDelete {:fg p.fg-removed :bg p.bg-removed-faint})
       ,(hi! :DiffText {:bg p.bg-changed-refine})
       ,(hi! :Directory {:fg p.accent-0})
       ,(hi! :lCursor {:link :Cursor})
       ,(hi! :CursorLineFold {:fg p.cyan :bg p.fringe})
       ,(hi! :CursorLineNr {:fg p.fg-line-number-active :bg p.bg-line-number-active :bold true})
       ,(hi! :CursorLineSign {:link :SignColumn})
       ,(hi! :EndOfBuffer {:fg p.fg-space})
       ,(hi! :ErrorMsg {:fg p.modeline-err})
       ,(hi! :FloatBorder {:fg p.border :bg p.bg-dim})
       ,(hi! :FloatTitle {:fg p.fg-dim :bg p.bg-dim})
       ,(hi! :FoldColumn {:fg p.cyan :bg p.fringe})
       ,(hi! :Folded {:fg p.fg-dim :bg p.bg-inactive})
       ,(hi! :IncSearch {:fg p.fg-main :bg p.bg-search-current})
       ,(hi! :LineNr {:fg p.fg-line-number-inactive :bg p.bg-line-number-inactive})
       ,(hi! :LineNrAbove {:fg p.fg-line-number-inactive :bg p.bg-line-number-inactive})
       ,(hi! :LineNrBelow {:fg p.fg-line-number-inactive :bg p.bg-line-number-inactive})
       ,(hi! :MatchParen {:fg p.fg-main :bg p.bg-paren-match})
       ,(hi! :ModeMsg {:fg p.modeline-info})
       ,(hi! :MoreMsg {:fg p.fg-prompt})
       ,(hi! :MsgArea {:fg p.fg-alt})
       ,(hi! :NonText {:fg p.fg-space})
       ,(hi! :Normal {:fg p.fg-main :bg p.bg-main})
       ,(hi! :NormalFloat {:fg p.fg-main :bg p.bg-dim})
       ,(hi! :NormalNC {:link :Normal})
       ,(hi! :Pmenu {:fg p.fg-main :bg p.bg-dim})
       ,(hi! :PmenuSbar {:bg p.bg-inactive})
       ,(hi! :PmenuSel {:bg p.bg-completion :bold true})
       ,(hi! :PmenuThumb {:bg p.fg-alt})
       ,(hi! :Question {:fg p.fg-prompt})
       ,(hi! :QuickFixLine {:bg p.bg-completion :bold true})
       ,(hi! :Search {:fg p.fg-main :bg p.bg-search-lazy})
       ,(hi! :SignColumn {:bg p.fringe})
       ,(hi! :SnippetTabstop {:fg p.fg-main :bg p.bg-hover})
       ,(hi! :SpecialKey {:fg p.blue-warmer})
       ,(hi! :SpellBad {:undercurl true :sp p.underline-err})
       ,(hi! :SpellCap {:undercurl true :sp p.underline-warning})
       ,(hi! :SpellLocal {:undercurl true :sp p.underline-note})
       ,(hi! :SpellRare {:undercurl true :sp p.underline-note})
       ,(hi! :StatusLine {:fg p.fg-mode-line-active :bg p.bg-mode-line-active})
       ,(hi! :StatusLineNC {:fg p.fg-mode-line-inactive :bg p.bg-mode-line-inactive})
       ,(hi! :Substitute {:fg p.fg-main :bg p.bg-search-replace})
       ,(hi! :TabLine {:bg p.bg-tab-other})
       ,(hi! :TabLineFill {:bg p.bg-tab-bar})
       ,(hi! :TabLineSel {:bg p.bg-tab-current :bold true})
       ,(hi! :TermCursor {:link :Cursor})
       ,(hi! :TermCursorNC {:link :Cursor})
       ,(hi! :Title {:fg p.fg-heading-1})
       ,(hi! :Visual {:fg p.fg-region :bg p.bg-region})
       ,(hi! :VisualNOS {:fg p.fg-region :bg p.bg-region})
       ,(hi! :WarningMsg {:fg p.modeline-warning})
       ,(hi! :Whitespace {:fg p.fg-space})
       ,(hi! :WildMenu {:fg p.fg-completion-match-0})
       ,(hi! :WinBar {:link :StatusLine})
       ,(hi! :WinBarNC {:link :StatusLineNC})
       ,(hi! :WinSeparator {:fg p.border :bg p.bg-dim})

;;;;;;;; Syntax
       ,(hi! :Boolean {:fg p.constant})
       ,(hi! :Character {:fg p.string})
       ,(hi! :Comment {:fg p.comment})
       ,(hi! :Conditional {:fg p.keyword})
       ,(hi! :Constant {:fg p.constant})
       ,(hi! :Debug {:fg p.blue-cooler})
       ,(hi! :Define {:fg p.preprocessor})
       ,(hi! :Delimiter {:fg p.delimiter})
       ,(hi! :Error {:fg p.err})
       ,(hi! :Exception {:fg p.keyword})
       ,(hi! :Float {:fg p.number})
       ,(hi! :Function {:fg p.fnname})
       ,(hi! :Identifier {:fg p.variable})
       ,(hi! :Include {:fg p.keyword})
       ,(hi! :Keyword {:fg p.keyword})
       ,(hi! :Label {:fg p.keyword})
       ,(hi! :Macro {:fg p.preprocessor})
       ,(hi! :Number {:fg p.number})
       ,(hi! :Operator {:fg p.operator})
       ,(hi! :PreCondit {:fg p.preprocessor})
       ,(hi! :PreProc {:fg p.preprocessor})
       ,(hi! :Repeat {:fg p.keyword})
       ,(hi! :Special {:fg p.type})
       ,(hi! :SpecialChar {:fg p.rx-backslash})
       ,(hi! :SpecialComment {:fg p.rx-construct})
       ,(hi! :Statement {:fg p.keyword})
       ,(hi! :StorageClass {:fg p.keyword})
       ,(hi! :String {:fg p.string})
       ,(hi! :Structure {:fg p.keyword})
       ,(hi! :Tag {:fg p.fnname})
       ,(hi! :Todo {:fg p.string})
       ,(hi! :Type {:fg p.type})
       ,(hi! :Typedef {:fg p.type})
       ,(hi! :Underlined {:underline true})

       ,(hi! :Added {:fg p.fg-added-intense})
       ,(hi! :Changed {:fg p.fg-changed-intense})
       ,(hi! :Removed {:fg p.fg-removed-intense})

;;;;;;;; Tree-sitter
       ,(hi! "@attribute" {:link :PreProc})
       ,(hi! "@attribute.builtin" {:fg p.builtin})
       ,(hi! "@boolean" {:link :Boolean})
       ,(hi! "@character" {:link :Character})
       ,(hi! "@character.special" {:link :SpecialChar})
       ,(hi! "@comment" {:link :Comment})
       ,(hi! "@comment.documentation" {:link "@comment"})
       ,(hi! "@comment.error" {})
       ,(hi! "@comment.note" {})
       ,(hi! "@comment.todo" {})
       ,(hi! "@comment.warning" {})
       ,(hi! "@constant" {:link :Constant})
       ,(hi! "@constant.builtin" {:fg p.builtin})
       ,(hi! "@constant.macro" {:link :Define})
       ,(hi! "@constructor" {:fg p.fg-main})
       ,(hi! "@diff.delta" {:link :DiffChange})
       ,(hi! "@diff.minus" {:link :DiffDelete})
       ,(hi! "@diff.plus" {:link :DiffAdd})
       ,(hi! "@function" {:link :Function})
       ,(hi! "@function.builtin" {:fg p.builtin})
       ,(hi! "@function.call" {:link "@function"})
       ,(hi! "@function.macro" {:link :Macro})
       ,(hi! "@function.method" {:link :Function})
       ,(hi! "@function.method.call" {:link "@function.method"})
       ,(hi! "@keyword" {:link :Keyword})
       ,(hi! "@keyword.conditional" {:link :Conditional})
       ,(hi! "@keyword.conditional.ternary" {:link "@keyword.conditional"})
       ,(hi! "@keyword.coroutine" {:link "@keyword"})
       ,(hi! "@keyword.debug" {:link :Debug})
       ,(hi! "@keyword.directive" {:link :PreProc})
       ,(hi! "@keyword.directive.define" {:link :Define})
       ,(hi! "@keyword.exception" {:link :Exception})
       ,(hi! "@keyword.function" {:link "@keyword"})
       ,(hi! "@keyword.import" {:link :Include})
       ,(hi! "@keyword.modifier" {})
       ,(hi! "@keyword.operator" {:link "@operator"})
       ,(hi! "@keyword.repeat" {:link :Repeat})
       ,(hi! "@keyword.return" {:link "@keyword"})
       ,(hi! "@keyword.type" {:link "@type"})
       ,(hi! "@label" {:fg p.fg-alt})
       ,(hi! "@markup.heading" {:fg p.fg-heading-0 :bold true})
       ,(hi! "@markup.heading.1" {:fg p.fg-heading-1 :bold true})
       ,(hi! "@markup.heading.2" {:fg p.fg-heading-2 :bold true})
       ,(hi! "@markup.heading.3" {:fg p.fg-heading-3 :bold true})
       ,(hi! "@markup.heading.4" {:fg p.fg-heading-4 :bold true})
       ,(hi! "@markup.heading.5" {:fg p.fg-heading-5 :bold true})
       ,(hi! "@markup.heading.6" {:fg p.fg-heading-6 :bold true})
       ,(hi! "@markup.italic" {:italic true})
       ,(hi! "@markup.link" {:fg p.fg-dim})
       ,(hi! "@markup.link.label" {:fg p.fg-link :underline true})
       ,(hi! "@markup.link.url" {:fg p.fg-alt})
       ,(hi! "@markup.list" {})
       ,(hi! "@markup.list.checked" {})
       ,(hi! "@markup.list.unchecked" {})
       ,(hi! "@markup.math" {:link :Special})
       ,(hi! "@markup.quote" {:fg p.docstring})
       ,(hi! "@markup.raw" {:link :String})
       ,(hi! "@markup.raw.block" {:bg p.bg-dim})
       ,(hi! "@markup.raw.markdown_inline" {:fg p.fg-prose-code})
       ,(hi! "@markup.strikethrough" {:strikethrough true})
       ,(hi! "@markup.strong" {:bold true})
       ,(hi! "@markup.underline" {:underline true})
       ,(hi! "@module" {:link :Include})
       ,(hi! "@module.builtin" {:fg p.builtin})
       ,(hi! "@number" {:link :Number})
       ,(hi! "@number.float" {:link :Float})
       ,(hi! "@operator" {:link :Operator})
       ,(hi! "@property" {:fg p.variable})
       ,(hi! "@punctuation.bracket" {:fg p.bracket})
       ,(hi! "@punctuation.delimiter" {:link :Delimiter})
       ,(hi! "@punctuation.special" {:fg p.punctuation})
       ,(hi! "@string" {:link :String})
       ,(hi! "@string.documentation" {:fg p.docstring})
       ,(hi! "@string.escape" {:link "@string"})
       ,(hi! "@string.regexp" {:link "@string"})
       ,(hi! "@string.special" {:link :Special})
       ,(hi! "@string.special.path" {:link :Special})
       ,(hi! "@string.special.symbol" {:fg p.magenta-warmer})
       ,(hi! "@string.special.url" {:fg p.fg-alt})
       ,(hi! "@tag" {:link "@function"})
       ,(hi! "@tag.attribute" {:link "@constant"})
       ,(hi! "@tag.builtin" {:link "@tag"})
       ,(hi! "@tag.delimiter" {:link :Delimiter})
       ,(hi! "@type" {:link :Type})
       ,(hi! "@type.builtin" {:link "@type"})
       ,(hi! "@type.definition" {:link :TypeDef})
       ,(hi! "@variable" {:fg p.variable})
       ,(hi! "@variable.builtin" {:fg p.builtin})
       ,(hi! "@variable.member" {:link :Type})
       ,(hi! "@variable.parameter" {:link "@variable"})
       ,(hi! "@variable.parameter.builtin" {:fg p.builtin})

;;;;;;;; Semantic tokens
       ,(hi! "@lsp.type.boolean" {:link "@boolean"})
       ,(hi! "@lsp.type.builtinType" {:link "@type.builtin"})
       ,(hi! "@lsp.type.comment" {:link "@comment"})
       ,(hi! "@lsp.type.decorator" {:link "@attribute"})
       ,(hi! "@lsp.type.deriveHelper" {:link "@attribute"})
       ,(hi! "@lsp.type.enum" {:link "@type"})
       ,(hi! "@lsp.type.enumMember" {:link "@constant"})
       ,(hi! "@lsp.type.escapeSequence" {:link "@string.escape"})
       ,(hi! "@lsp.type.formatSpecifier" {:link "@markup.list"})
       ,(hi! "@lsp.type.generic" {:link "@variable"})
       ,(hi! "@lsp.type.interface" {:link "@keyword"})
       ,(hi! "@lsp.type.keyword" {:link "@keyword"})
       ,(hi! "@lsp.type.lifetime" {:link "@keyword.storage"})
       ,(hi! "@lsp.type.namespace" {:link "@module"})
       ,(hi! "@lsp.type.number" {:link "@number"})
       ,(hi! "@lsp.type.operator" {:link "@operator"})
       ,(hi! "@lsp.type.parameter" {:link "@variable.parameter"})
       ,(hi! "@lsp.type.property" {:link "@property"})
       ,(hi! "@lsp.type.selfKeyword" {:link "@variable.builtin"})
       ,(hi! "@lsp.type.selfTypeKeyword" {:link "@variable.builtin"})
       ,(hi! "@lsp.type.string" {:link "@string"})
       ,(hi! "@lsp.type.typeAlias" {:link "@type.definition"})
       ,(hi! "@lsp.type.unresolvedReference" {:undercurl true :sp p.err})
       ,(hi! "@lsp.type.variable" {:link "@variable"})
       ,(hi! "@lsp.typemod.class.defaultLibrary" {:link "@type.builtin"})
       ,(hi! "@lsp.typemod.enum.defaultLibrary" {:link "@type.builtin"})
       ,(hi! "@lsp.typemod.enumMember.defaultLibrary" {:link "@constant.builtin"})
       ,(hi! "@lsp.typemod.function.defaultLibrary" {:link "@function.builtin"})
       ,(hi! "@lsp.typemod.keyword.async" {:link "@keyword.coroutine"})
       ,(hi! "@lsp.typemod.keyword.injected" {:link "@keyword"})
       ,(hi! "@lsp.typemod.macro.defaultLibrary" {:link "@function.builtin"})
       ,(hi! "@lsp.typemod.method.defaultLibrary" {:link "@function.builtin"})
       ,(hi! "@lsp.typemod.operator.injected" {:link "@operator"})
       ,(hi! "@lsp.typemod.string.injected" {:link "@string"})
       ,(hi! "@lsp.typemod.struct.defaultLibrary" {:link "@type.builtin"})
       ,(hi! "@lsp.typemod.type.defaultLibrary" {:link "@type"})
       ,(hi! "@lsp.typemod.typeAlias.defaultLibrary" {:link "@type"})
       ,(hi! "@lsp.typemod.variable.callable" {:link "@function"})
       ,(hi! "@lsp.typemod.variable.defaultLibrary" {:link "@variable.builtin"})
       ,(hi! "@lsp.typemod.variable.injected" {:link "@variable"})
       ,(hi! "@lsp.typemod.variable.static" {:link "@constant"})

;;;;;;;; Diagnostics
       ,(hi! :DiagnosticError {:fg p.err})
       ,(hi! :DiagnosticHint {:fg p.info})
       ,(hi! :DiagnosticInfo {:fg p.info})
       ,(hi! :DiagnosticWarn {:fg p.warning})
       ,(hi! :DiagnosticUnnecessary {:fg p.fg-dim})
       ,(hi! :DiagnosticSignError {:fg p.err :bg p.fringe})
       ,(hi! :DiagnosticSignHint {:fg p.info :bg p.fringe})
       ,(hi! :DiagnosticSignInfo {:fg p.info :bg p.fringe})
       ,(hi! :DiagnosticSignWarn {:fg p.warning :bg p.fringe})
       ,(hi! :DiagnosticLineError {:bg p.bg-red-nuanced})
       ,(hi! :DiagnosticLineHint {:bg p.bg-cyan-nuanced})
       ,(hi! :DiagnosticLineInfo {:bg p.bg-cyan-nuanced})
       ,(hi! :DiagnosticLineWarn {:bg p.bg-yellow-nuanced})
       ,(hi! :DiagnosticVirtualTextError {:fg p.err :bg p.bg-red-nuanced})
       ,(hi! :DiagnosticVirtualTextHint {:fg p.info :bg p.bg-cyan-nuanced})
       ,(hi! :DiagnosticVirtualTextInfo {:fg p.info :bg p.bg-cyan-nuanced})
       ,(hi! :DiagnosticVirtualTextWarn {:fg p.warning :bg p.bg-yellow-nuanced})
       ,(hi! :DiagnosticUnderlineError {:sp p.underline-err :undercurl true})
       ,(hi! :DiagnosticUnderlineHint {:sp p.underline-note :undercurl true})
       ,(hi! :DiagnosticUnderlineInfo {:sp p.underline-note :undercurl true})
       ,(hi! :DiagnosticUnderlineWarn {:sp p.underline-warning :undercurl true})

;;;;;;;; Blink.cmp
       ,(hi! :BlinkCmpMenu {:fg p.fg-main :bg p.bg-dim})
       ,(hi! :BlinkCmpMenuBorder {:fg p.bg-active :bg p.bg-dim})
       ,(hi! :BlinkCmpMenuSelection {:bg p.bg-completion :bold true})
       ,(hi! :BlinkCmpScrollBarThumb {:bg p.fg-alt})
       ,(hi! :BlinkCmpScrollBarGutter {:bg p.bg-inactive})
       ,(hi! :BlinkCmpLabel {:fg p.fg-main})
       ,(hi! :BlinkCmpLabelDeprecated {:fg p.fg-alt :strikethrough true})
       ,(hi! :BlinkCmpLabelMatch {:fg p.fg-completion-match-0 :bold true})
       ,(hi! :BlinkCmpLabelDetail {:fg p.fg-alt})
       ,(hi! :BlinkCmpLabelDescription {:fg p.fg-alt})
       ,(hi! :BlinkCmpKind {:fg p.fg-main})
       ,(hi! :BlinkCmpSource {:fg p.fg-dim})
       ,(hi! :BlinkCmpGhostText {:fg p.fg-dim})
       ,(hi! :BlinkCmpDoc {:fg p.fg-main :bg p.bg-dim})
       ,(hi! :BlinkCmpDocBorder {:fg p.border :bg p.bg-dim})
       ,(hi! :BlinkCmpDocSeparator {:fg p.border :bg p.bg-dim})
       ,(hi! :BlinkCmpDocCursorLine {:bg p.bg-hl-line})
       ,(hi! :BlinkCmpSignatureHelp {:fg p.fg-main :bg p.bg-dim})
       ,(hi! :BlinkCmpSignatureHelpBorder {:fg p.border :bg p.bg-dim})
       ,(hi! :BlinkCmpSignatureHelpActiveParameter {:fg p.fg-active-argument :bg p.bg-active-argument})

       ;; BlinkCmpKind<kind>
       ,(hi-kinds! :BlinkCmpKind)

;;;;;;;; Leap.nvim
       ,(hi! :LeapMatch {:link :IncSearch})
       ,(hi! :LeapLabel {:fg p.fg-main :bg p.bg-char-0 :bold true})
       ,(hi! :LeapBackdrop {})

;;;;;;;; Snacks.nvim
       ,(hi! :SnacksPicker {:bg p.bg-main})
       ,(hi! :SnacksPickerBorder {:fg p.fg-dim :bg p.bg-main})
       ,(hi! :SnacksPickerDir {:fg p.fg-main})
       ,(hi! :SnacksPickerListCursorLine {:bg p.bg-completion :bold true})
       ,(hi! :SnacksPickerMatch {:fg p.fg-completion-match-0 :bold true})
       ,(hi! :SnacksPickerTitle {:fg p.fg-dim :bg p.bg-main})
       ,(hi! :SnacksPickerTotals {:fg p.fg-prompt :bg p.bg-prompt})

;;;;;;;; Mini.nvim
       ,(hi! :MiniCursorword {:fg p.fg-main :bg p.bg-hover})
       ,(hi! :MiniCursorwordCurrent {:fg p.fg-main :bg p.bg-hover})
       ,(hi! :MiniDiffSignAdd {:fg p.fg-added :bg p.bg-added-fringe})
       ,(hi! :MiniDiffSignChange {:fg p.fg-changed :bg p.bg-changed-fringe})
       ,(hi! :MiniDiffSignDelete {:fg p.fg-removed :bg p.bg-removed-fringe})
       ,(hi! :MiniIndentscopeSymbol {:fg p.bg-active})
       ,(hi! :MiniSnippetsCurrent {:fg p.fg-main :bg p.bg-hover})
       ,(hi! :MiniSnippetsCurrentReplace {:fg p.fg-main :bg p.bg-hover})
       ,(hi! :MiniSnippetsFinal {:sp p.bg-main})
       ,(hi! :MiniSnippetsUnvisited {:sp p.bg-main})
       ,(hi! :MiniSnippetsVisited {:sp p.bg-main})
       ,(hi! :MiniTrailspace {:bg p.bg-space-err}))))

{: modus-themes-theme}
